# This is a basic workflow to help you get started with Actions

name: buildrelease

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    tags:
    - 'v*' 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build-linux:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: 3.9
          # File containing the Python version to use. Example: .python-version
          
      - name: Install Dependencies
        run: |
          sudo apt-get install libdbus-1-dev
          sudo apt-get install python-dbus 
          pip3 install dbus-python
          pip3 install -U nuitka
          pip3 install -U requests
          pip3 install -U colorama
          pip3 install -U notify2

      - name: Compile
        run: |
          python -m nuitka --standalone --onefile --follow-imports --follow-stdlib -o linux-compiled main-notwin.py 

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./linux-compiled
          asset_name: linux-compiled
          asset_content_type: application/octet-stream
          
  
  build-windows:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: 3.9
          # File containing the Python version to use. Example: .python-version
          
      - name: Install Dependencies
        run: |
          pip3 install -U nuitka
          pip3 install -U requests
          pip3 install -U colorama
          pip3 install -U win10toast

      - name: Compile
        run: |
          python -m nuitka --standalone --onefile --follow-imports --follow-stdlib -o windows-compiled.exe main-win.py

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./windows-compiled.exe
          asset_name: windows-compiled.exe
          asset_content_type: application/octet-stream

  build-macos:

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: 3.9
          # File containing the Python version to use. Example: .python-version
          
      - name: Install Dependencies
        run: |
          brew install dbus
          pip3 install -U nuitka
          pip3 install -U requests
          pip3 install -U colorama
          pip3 install -U notify2

      - name: Compile
        run: |
          python -m nuitka --standalone --onefile --follow-imports --follow-stdlib -o macos-compiled main-notwin.py

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /macos-compiled
          asset_name: macos-compiled
          asset_content_type: application/octet-stream
